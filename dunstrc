[global]
    font = Monospace 11

    # allow a small subset of html markup:
    # <b>bold</b>
    # <i>italic</i>
    # <s>strikethrough<s/>
    # <u>underline</u>
    #
    # for a complete reference see http://developer.gnome.org/pango/stable/PangoMarkupFormat.html
    # If markup is not allowed, those tags will be stripped out of the message.
    allow_markup = yes

    # The format of the message. Possible variables are:
    #   %a  appname
    #   %s  summary
    #   %b  body
    #   %i  iconname (including its path)
    #   %I  iconname (without its path)
    #   %p  progress value if set ([  0%] to [100%]) or nothing
    # Markup is allowed
    format = "<b>%a</b> - <i>%s</i>\n%b"

    # Sort messages by urgency
    sort = no

    # Show how many messages are currently hidden (because of geometry)
    indicate_hidden = yes

    # alignment of message text.
    # Possible values are "left", "center" and "right"
    alignment = left

    # The frequency with which text that is longer than the notification
    # window allows bounces back and forth.
    # This option conflicts with 'word_wrap'.
    # Set to 0 to disable
    bounce_freq = 0

    # show age of message if message is older than show_age_threshold seconds.
    # set to -1 to disable
    show_age_threshold = -1

    # split notifications into multiple lines if they don't fit into geometry
    word_wrap = yes

    # ignore newlines '\n' in notifications
    ignore_newline = no


    # width = The width of the notification window in pixels. This can be a 
    # single number to specify a constant width or two numbers for the minimum 
    # and maximum width. The notification will expand from the minimum width as
    # necessary. Examples: width = 300 is a constant width of 300, and width = 
    # (0, 300) is a width between 0 and 300. When setting a width bigger than 
    # the screen, dunst will clamp the width to the screen width. So if you want 
    # the notification to stretch the entire screen dynamically, you may set the 
    # width to a high enough number, which none of your screens exceed (e.g. 10000)
    width = 600

    # height = The maximum height of a single notification.

    # notification_limit (default: 0) = The number of notifications that can appear 
    # at one time. When this limit is reached any additional notifications will be
    # queued and displayed when the currently displayed ones either time out or are 
    # manually dismissed. The value 0 means no limit. If indicate_hidden is true, then 
    # the specified limit is reduced by 1 and the last notification is a message
    # informing how many hidden notifications are waiting to be displayed. See the
    # indicate_hidden entry for more information.

    # origin (default: top-right) = The origin of the notification window on the 
    # screen. It can then be moved with offset. Origin can be one of: top-left 
    # top-center top-right bottom-left bottom-center bottom-right left-center 
    # center right-center. offset format: (horizontal, vertical). Respectively 
    # the horizontal and vertical offset in pixels from the corner of the screen 
    # specified by origin. A negative offset will lead to the notification being off 
    # screen. Examples: origin = top-right offset = 10x300 = a margin of 10 pixels 
    # from the right and 300 pixels from the top.

    # The transparency of the window. range: [0; 100]
    # This option will only work if a compositing windowmanager is present (e.g. xcompmgr, compiz, etc..)
    transparency = 0

    # Don't remove messages, if the user is idle (no mouse or keyboard input)
    # for longer than idle_threshold seconds.
    # Set to 0 to disable.
    idle_threshold = 0

    # Which monitor should the notifications be displayed on.
    monitor = 0

    # Display notification on focused monitor. Possible modes are:
    # mouse: follow mouse pointer
    # keyboard: follow window with keyboard focus
    # none: don't follow anything
    #
    # "keyboard" needs a windowmanager that exports the _NET_ACTIVE_WINDOW property.
    # This should be the case for almost all modern windowmanagers.
    #
    # If this option is set to mouse or keyboard, the monitor option will be
    # ignored.
    follow = none

    # should a notification popped up from history be sticky or
    # timeout as if it would normally do.
    sticky_history = yes

    # The height of a single line. If the height is smaller than the font height,
    # it will get raised to the font height.
    # This adds empty space above and under the text.
    line_height = 8

    # Draw a line of 'separatpr_height' pixel height between two notifications.
    # Set to 0 to disable
    separator_height = 1

    # padding between text and separator
    padding = 8

    # horizontal padding
    horizontal_padding = 8

    # Define a color for the separator.
    # possible values are:
    #  * auto: dunst tries to find a color fitting to the background
    #  * foreground: use the same color as the foreground
    #  * frame: use the same color as the frame.
    #  * anything else will be interpreted as a X color
    separator_color = frame

    # print a notification on startup
    # This is mainly for error detection, since dbus (re-)starts dunst
    # automatically after a crash.
    startup_notification = false

    # dmenu path
    dmenu = /usr/bin/dmenu -p dunst:

    # browser for opening urls in context menu
    #browser = /usr/bin/google-chrome

[frame]
    width = 0
    color = "#000000"

[shortcuts]
    # shortcuts are specified as [modifier+][modifier+]...key
    # available modifiers are 'ctrl', 'mod1' (the alt-key), 'mod2', 'mod3'
    # and 'mod4' (windows-key)
    # xev might be helpful to find names for keys

    # close notification
    close = ctrl+space

    # close all notifications
    close_all = ctrl+shift+space

    # redisplay last message(s)
    # On the US keyboard layout 'grave' is normally above TAB and left of '1'.
    history = ctrl+grave

    # context menu
    context = ctrl+shift+period

[urgency_low]
    # IMPORTANT: colors have to be defined in quotation marks.
    # Otherwise the '#' and following  would be interpreted as a comment.
    background = "#444444"
    foreground = "#ffcc99"
    timeout = 5

[urgency_normal]
    background = "#444444"
    foreground = "#ffcc99"
    timeout = 10 

[urgency_critical]
    background = "#444444"
    foreground = "#ffcc99"
    timeout = 15


# Every section that isn't one of the above is interpreted as a rules
# to override settings for certain messages.
# Messages can be matched by 'appname', 'summary', 'body' or 'icon'
# and you can override the 'timeout', 'urgency', 'foreground', 'background'
# and 'format'.
# Shell-like globbing will get expanded.
#
# SCRIPTING
# you can specify a script that gets run when the rule matches by setting
# the 'script' option.
# The script will be called as follows:
# script appname summary body icon urgency
# where urgency can be "LOW", "NORMAL" or "CRITICAL".
#
# NOTE: if you don't want a notification to be displayed, set the format to ""
# NOTE: It might be helpful to run dunst -print in a terminal in order to find
# fitting options for rules.

[ignore]
   # This notification will not be displayed
   appname = "Dropbox"
   summary = "Dropbox"
   format = ""

[all]
   script = /home/rd/Notifications/notify_and_log.sh
